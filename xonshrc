import hashlib
import os
import platform
import shlex


from xonsh.events import events
from xonsh.tools import EnvPath

$AUTO_CD = True
$AUTO_PUSHD = True
$BASH_COMPLETIONS = '/usr/local/share/bash-completion/'
$CASE_SENSITIVE_COMPLETIONS = False
$DYNAMIC_CWD_ELISION_CHAR = '…'
$XONSH_SHOW_TRACEBACK = True
# source-bash --overwrite-aliases --interactive True --sourcer source "echo loading xonsh foreign shell"

$XONSH_HISTORY_SIZE = (1073741824, "commands")

# =================================== aliases =================================

def _md(args, stdin=None):
    mkdir -p @(args[0])
    cd @(args[0])

if $(ls --version 2>/dev/null).strip():
    aliases['ls'].append('--color=auto')

if $(which gfind 2>/dev/null):
    aliases['find'] = 'gfind'

aliases['md'] = _md
aliases['-'] = 'cd -'
aliases['..'] = 'cd ..'
aliases['....'] = 'cd ../..'
aliases['g'] = 'grep -i --color=auto'.split()
aliases['l'] = 'less'
aliases['e'] = 'emacsclient -n'
aliases['s'] = 'perl -pi -e'.split()
aliases['wanip'] = 'curl -s -4 ifconfig.co'
aliases['wanip6'] = 'curl -s -6 ifconfig.co'
aliases['localips'] = r"ifconfig -a | perl -nle r'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"
aliases['localip'] = aliases['localips'].src.strip() + " | grep -v 127.0.0.1 | grep -v 169.254"

# =================================== exports =================================

$EDITOR = "emacsclient"
# Don't clear the screen after quitting a manual page
$MANPAGER = "less -X"
$LESS = "--ignore-case --quit-if-one-screen --quit-on-intr FRXQ"

$PROJECTS = $HOME + "/projects"
$SANDBOX = $HOME + "/sandbox"
$PHD = $PROJECTS + "/phd"

# for autovox
$PROJECT_DIRS = [$PROJECTS]

$GOPATH = $PROJECTS + "/go"

$RIPGREP_CONFIG_PATH = $HOME + "/.ripgreprc"

$ANSIBLE_VAULT_PASSWORD_FILE = $HOME + "/.vault_pass.txt"

# sweet, sweet emacs
esf = ".emacs.d/server/server"
$EMACS_SERVER_FILE = $HOME + '/' + esf

# if we're not on our home machine, then set tramp
if $HOME != "/Users/" + $USER:
    $EMACSCLIENT_TRAMP = "/ssh:" + $(hostname -f).strip() + ":"

# always use ipdb for breakpoint()
$PYTHONBREAKPOINT = "ipdb.set_trace"

$USER_PYTHON = $HOME + "/Library/Python/3.9"
# $PYTHONPATH = $USER_PYTHON + "/lib/python/site-packages"

# npm
$NPM_PACKAGES = $HOME + "/.npm-packages"
# tell node about these packages
$NODE_PATH = $NPM_PACKAGES + "/lib/node_modules"

# ==================================== paths ==================================

# only add paths that aren't already in PATH
# use reverse since we're prepending
for p in reversed([
        # always put emacs first; could be either a homebrew install or a
        # custom build, so just add symlink (hopefully they never
        # conflict)
        # e.g. ln -s ~/projects/emacs/nextstep/Emacs.app /Applications/Emacs.app
        # e.g. ln -s /usr/local/opt/emacs-plus@28/Emacs.app /Applications
        #"/Applications/Emacs.app/Contents/MacOS/bin",
        #"/usr/local/Cellar/emacs-plus@28/28.0.50/bin",
        $HOME + "/.local/bin",
        $HOME + "/.cargo/bin",
        $GOPATH[0] + "/bin",
        $USER_PYTHON + "/bin",
        $NPM_PACKAGES + "/bin",
        "/opt/X11/bin",
        "/usr/local/bin",
        "/usr/local/sbin",
        "/usr/local/cuda/bin",
        "/usr/local/share/dotnet",
        "/usr/local/opt/coreutils/libexec/gnubin",
        "/usr/local/opt/make/libexec/gnubin",
        "/usr/local/opt/texinfo/bin",
        "/usr/local/Cellar/qt/5.14.2/bin",
        "/Library/TeX/texbin",
]):
    if p not in $PATH:
        $PATH.insert(0, p)

# =================================== prompt ==================================

# determine type of os
$PROMPT_FIELDS['os'] = ''
plat = platform.platform().lower()
if 'darwin' in plat:
    $PROMPT_FIELDS['os'] = ''
elif 'ubuntu' in plat:
    $PROMPT_FIELDS['os'] = ''
elif 'fedora' in plat:
    $PROMPT_FIELDS['os'] = ''
elif 'centos' in plat:
    $PROMPT_FIELDS['os'] = ''


def host_color():
    hn = $PROMPT_FIELDS['hostname'].encode('utf8')
    hn_hash = hashlib.md5(hn)
    colors = [
        "#D68700",
        "#FFC97F",
        "#C0893F",
        "#804900",
        "#F26722",
    ]
    # print(hn_hash.hexdigest())
    # TODO finish fixing this
    return colors[0]


$PROMPT_FIELDS['env_prefix'] = $PROMPT_FIELDS['env_postfix'] = ''

$PROMPT = ("\n{#686868}┌─{BOLD_RED} {user} "
           "{BOLD_%s}{os} {hostname}{RESET}"
           "{BOLD_BLUE}  {short_cwd}"
           "{branch_color}{curr_branch:  {}}"
           "{BOLD_YELLOW}{env_name:  {}}\n"
           # "{ret_code_color}{ret_code}\n"
           "{#686868}└─{RESET} ") % host_color()

# ===================================== etc ===================================

if (os.path.isfile('/usr/bin/security') and
    !(ssh-add -lq a> /dev/null).returncode == 1):
    ssh-add -K

# =================================== events ==================================

@events.on_precommand
def ssh_pre(cmd, **kwargs):
    cmds = shlex.split(cmd)
    if cmds and cmds[0] == 'ssh':
        hname = ""
        for c in cmds[1:]:
            if not c.startswith('-'):
                hname = c
                if '@' in hname:
                    hname = hname.split('@', 1)[1]
                break
        # build set of hostnames that we explicity want to scp the emacs file
        names = set()
        for line in open(os.environ['HOME'] + '/.ssh/config'):
            line = line.strip()
            if line.endswith('# emacs'):
                line = line.replace("Host ", "")
                line = line.replace("# emacs", "")
                names ^= set(line.strip().split())
        if hname and hname in names:
            scp $EMACS_SERVER_FILE @(hname):@(esf)

# ================================= x11 docker =================================

def _x11docker(args, stdin=None, stdout=None, stderr=None):
    xhost +
    docker run -e DISPLAY=host.docker.internal:0 @(args)
    xhost -
    return 0

aliases['x11docker'] = _x11docker

# =========================== itunes playlist to mpd ===========================

def _itunes_to_mpd(args, stdin=None, stdout=None, stderr=None):
    ofn = os.environ["HOME"] + "/Music/playlists/" + args[0]
    with open(args[0]) as f, open(ofn, 'w') as o:
        for line in f:
            if not line.startswith("#"):
                o.write(line)

    rm @(args[0])

aliases['itunes_to_mpd'] = _itunes_to_mpd

# =================================== plugins =================================

# read bash completions
$BASH_COMPLETIONS.insert(0, '/usr/local/share/bash-completion/bash_completion')

xontrib load z coreutils distributed docker_tabcomplete mpl
xontrib load vox # prompt_ret_code vox_tabcomplete
xontrib load readable-traceback autovox avox
