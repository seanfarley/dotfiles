# @gf3’s Sexy Bash Prompt, inspired by "Extravagant Zsh Prompt"
# Shamelessly copied from https://github.com/gf3/dotfiles

# Powerline fonts from: https://github.com/Lokaltog/powerline-fonts
# On Mavericks, the powerline font was about 1px off, so followed:
# https://gist.github.com/qrush/1595572
# on the powerline-fontpatcher repo and settled on just using the y offset

# Helper functions are borrowed from liquidprompt:
# https://github.com/nojhan/liquidprompt

# exit if we terminal can't do colors
if [[ ! -t 0 ]] || [[ "$TERM" == "dumb" ]]; then
  return
fi

##
# colored highlighting is awesome
##

if [[ "$TERM" != "dumb" ]] && [[ -x "$(which dircolors 2>/dev/null)" ]]; then
  eval "$(dircolors -b ~/.dir_colors)"
fi

RESET=$(tput sgr0)
BOLD=$(tput bold)

BLACK=0
WHITE=240
MAGENTA=9
GREEN=190
PURPLE=5
ORANGE=172
YELLOW=214
PINK=216
DARKBLUE=18

PATHBG=237                      # dark grey
PATHFG=250                      # light grey
SEP_FG=244                      # nearly-white grey

CLEAN_BG=148                    # a light green color
CLEAN_FG=0                      # black
DIRTY_BG=161                    # pink/red
DIRTY_FG=15                     # white

PASSBG=236                      # dary grey
PASSFG=15                       # white-ish
FAILBG=161                      # pink/red
FAILFG=15                       # white-ish

HG="$(which hg 2>/dev/null)"
[[ -n "$(which chg 2>/dev/null)" ]] && HG="$(which chg)"

MD5="md5"
[[ -n "$(which md5sum 2>/dev/null)" ]] && MD5="md5sum"

PROMPT_SHOW_OS_VERSION=1

COLORS=(
  "$MAGENTA"
  "$YELLOW"
  "$MAGENTA"
  "$WHITE"
  "$PINK"
  "$PURPLE"
  "$PURPLE"
  "$PINK"
  "$WHITE"
  "$YELLOW"
  "$GREEN"
)

function colorize () {
  # optional arg 2 could be bold or reset or both or whatevs
  printf '%s' "\[$2\]\[$(tput setaf "$1")\]"
}

function os_type () {
  local os_icon=""
  local pver=""
  local NAME=""
  local VERSION_ID=""

  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    os_icon=""
    if [ -f /etc/os-release ]; then
      # disabling since the warning is a false positive
      # shellcheck disable=SC1091
      source /etc/os-release
      OS="$NAME"
      VER="$VERSION_ID"
    else
      # Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
      OS=$(uname -s)
      VER=$(uname -r)
    fi

    if [[ "$OS" == *"Ubuntu"* ]]; then
      os_icon=""
    elif [[ "$OS" == *"Debian"* ]]; then
     os_icon=""
    elif [[ "$OS" == "SLES" ]]; then
      os_icon=""
    elif [[ "$OS" == *"CentOS"* ]]; then
      os_icon=""
    elif [[ "$OS" == *"BSD"* ]]; then
      os_icon=""
    fi

  elif [[ "$OSTYPE" == "darwin"* ]]; then
    os_icon=""
    VER=$(echo "$OSTYPE" | cut -d n -f 2 | cut -d . -f 1)
    if [[ $VER == 21 ]]; then
      VER="Monterey"
    elif [[ $VER == 20 ]]; then
      VER="Big Sur"
    elif [[ $VER == 19 ]]; then
      VER="Catalina"
    elif [[ $VER == 18 ]]; then
      VER="Mojave"
    fi
  elif [[ "$OSTYPE" == "freebsd"* ]]; then
    os_icon=""
  fi

  [[ $PROMPT_SHOW_OS_VERSION != 0 ]] && pver=" ($VER)"

  printf '%s' "$os_icon $(hostname)$pver"
}

function pretty_dir () {
  # decent default values
  local max_len=27
  local mask=" … "
  local keep=2
  local ret=""
  local p=${PWD/#$HOME/"~"}

  if (( ${#p} <= max_len )); then
    ret="$p"
  else
    local tmp=${p//\//}
    local -i delims=$(( ${#p} - ${#tmp} ))

    for (( dir=0; dir < keep; dir++ )); do
      (( "${dir}" == "${delims}" )) && break

      local left="${p#*/}"
      local name="${p:0:${#p} - ${#left}}"
      p="${left}"
      ret="${ret}${name%/}/"
    done

    if (( delims <= keep )); then
      # no dirs between LP_PATH_KEEP leading dirs and current dir
      ret="${ret}${p##*/}"
    else
      local base="${p##*/}"

      p="${p:0:${#p} - ${#base}}"

      [[ ${ret} != "/" ]] && ret="${ret%/}" # strip trailing slash

      local -i len_left=$(( max_len - ${#ret} - ${#base} - ${#mask} ))

      ret="${ret}${mask}${p:${#p} - ${len_left}}${base}"
    fi
  fi

  printf '%s' "${ret//\\/\\\\}"
}

# Search upwards through a directory structure looking for a file/folder with
# the given name.  Used to avoid invoking 'hg' and 'bzr'.
_lp_upwards_find()
{
    local dir
    dir="$PWD"
    while [[ -n "$dir" ]]; do
        [[ -d "$dir/$1" || -f "$dir/$1" ]] && printf '%s' "$dir" && return 0
        dir="${dir%/*}"
    done
    return 1
}

function _lp_git_branch() {
  local gitdir
  gitdir="$([[ $(\git ls-files . 2>/dev/null | wc -l) -gt 0 ]] && \git rev-parse --git-dir 2>/dev/null)"
  [[ $? -ne 0 || ! $gitdir =~ (.*\/)?\.git.* ]] && return
  local branch
  # Recent versions of Git support the --short option for symbolic-ref, but
  # not 1.7.9 (Ubuntu 12.04)
  if branch="$(\git symbolic-ref -q HEAD)"; then
    printf '%s' "${branch#refs/heads/}"
  else
    # In detached head state, use commit instead
    # No escape needed
    \git rev-parse --short -q HEAD
  fi
}

# return 0 or 1 for dirty working directory
function _git_info() {
  local br
  local remote
  local st

  br="$(_lp_git_branch)"

  if [[ ! -d /cygdrive/c ]]; then
    [[ -n "$(\git stash list 2>/dev/null)" ]] && br="$br+"

    st="$(git status 2> /dev/null)"
    if [[ "$st" == *"Your branch is"* ]]; then
      remote="$(echo "$st" | perl -lne 'print " $2$1" if /Your branch is (ahead|behind).*?(\d+) comm/' | perl -pe 's,behind,⇣,' | perl -pe 's,ahead,⇡,')"
    else
      remote="$(echo "$st" | perl -lne 'print " $1⇡ $2⇣" if /and have (\d+) and (\d+) diff/')"
    fi
    st="$(echo "$st" | tail -1 | grep -v 'nothing to commit')"
  fi

  printf '%s' "$br$remote"

  [[ -n "$st" ]] && return 1
  return 0
}

# return 0 or 1 for dirty working directory
function _hg_info() {
  local repo_dir="$1"
  local br
  local st
  local remote
  local p1
  local p2
  local head

  br="$(less "$repo_dir/.hg/topic" 2>/dev/null)"

  [[ -z "$br" ]] && br="$(less "$repo_dir/.hg/bookmarks.current" 2>/dev/null)"

  # if the dirstate doesn't exist, the repo is null, so just report 'default'
  [[ ! -f "$repo_dir/.hg/dirstate" ]] && br="default"

  # fallback to branch name if bookmark isn't active
  if [[ -z "$br" ]]; then
    p1="$(head -c 20 "$repo_dir/.hg/dirstate" | xxd -p)"
    [[ -z "$p1" ]] && p1="0000000"
    p2="$(head -c 40 "$repo_dir/.hg/dirstate" | xxd -p -s 20)"
    [[ -z "$p2" ]] && p2="0000000"
    br="$(less "$repo_dir/.hg/branch" 2>/dev/null)"
    [[ -z "$br" ]] && br="default"
    # only display the branch name if it's a head
    head="$(grep -c $p1 "$repo_dir/.hg/cache/branch2" 2>/dev/null)"
    [[ -z "$head" ]] && head="0"
    if [[ "$head" == "0" ]]; then
      p1="$(echo $p1 | head -c 7)"
      p2="$(echo $p2 | head -c 7)"
      # br="$p1"
      # [[ "$p2" != "0000000" ]] && br="$p1 $p2"
    fi
  fi

  remote=""
  read -r -a distance <<< "$(grep "^$br " "$repo_dir/.hg/cache/distance" 2>/dev/null | cut -d' ' -f2-)"
  [[ ${distance[0]} != "" && ${distance[0]} != "0" ]] && remote="$remote ${distance[0]}⇡"
  [[ ${distance[1]} != "" && ${distance[1]} != "0" ]] && remote="$remote ${distance[1]}⇣"

  if [[ "$remote" == "" && $br == "default" ]]; then
    read -r -a distance <<< "$(less "$repo_dir/.hg/cache/distance.current" 2>/dev/null)"
    [[ ${distance[0]} != "" ]] && br=":${distance[0]}"
    [[ ${distance[1]} != "" && ${distance[1]} != "0" ]] && remote=" ${distance[1]}⇣"
  fi

  if [[ ! -d /cygdrive/c ]]; then
    st="$($HG status 2>/dev/null)"
    [[ "$(echo "$st" | grep -c '\(^\?\)')" != "0" ]] && br="$br*"
    [[ -n "$(ls "$repo_dir/.hg/shelved/" 2>/dev/null)" ]] && br="$br+"
  fi

  printf '%s' "$br$remote"

  [[ -n "$st" ]] && return 1
  return 0
}

################
# Related jobs #
################

# Display the count of each if non-zero:
# - detached screens sessions and/or tmux sessions running on the host
# - attached running jobs (started with $ myjob &)
# - attached stopped jobs (suspended with Ctrl-Z)
_lp_jobcount_color()
{
    local running=$(( $(jobs -r | wc -l) ))
    local stopped=$(( $(jobs -s | wc -l) ))
    local m_stop="z"
    local m_run="&"
    local ret=""

    if [[ $running != "0" ]] ; then
        ret="${ret}${running}${m_run}"
    fi

    if [[ $stopped != "0" ]] ; then
        ret="${ret}${stopped}${m_stop}"
    fi

    printf '%s' "$ret"
}

# adds a new powerline chain link
# note: last argument is optional and represents the beginning separator
# call as _chain("FOO" oldbg bg fg '>')
function _chain() {
  [[ -z "$1" ]] && return 255
  printf '%s' "\[$(tput setaf "$2")$(tput setab "$3")\]${5:-} \[$(tput setaf "$4")\]$1 \[$RESET\]"
}

# note: unless the last portion of PS1 is a newline, then calling functions will have a
# problem as described here:
# http://stackoverflow.com/questions/6592077/bash-prompt-and-echoing-colors-inside-a-function
function update_ps1 () {
  # this function will build the PS1 string in-place as opposed to embedding bash
  # functions in the string due craziness with escape sequences as mentioned in the
  # stackoverflow link above
  local err=$?

  # keeping track of the current powerline color
  local oldbg=0
  local bg
  local fg

  # repo variables
  local repo
  local repo_dir
  local dirty
  local vcs_type
  local vcs_extra
  local host

  # prompt variable to build
  local prompt

  prompt="$(colorize 001 "$BOLD") $USER \[$RESET\]"

  prompt="$prompt$(colorize 172 "$BOLD")$(os_type) \[$RESET\]"

  # TODO fix hostname coloring
  # only generate a hash color for non-local machines
  # fg=$BLACK
  # if [[ "$(hostname)" != laptop* ]]; then
  #   # generate a hash from the hostname
  #   local host_hash

  #   host_hash="$(hostname | $MD5)"

  #   # convert into a positive integer
  #   local host_number=$(( 0x${host_hash:4:6} % ${#COLORS[@]} ))
  #   [[ $host_number -lt 0 ]] && host_number=$(( -host_number ))

  #   bg=${COLORS[$host_number]}
  # fi

  local jobs
  jobs="$(_lp_jobcount_color)"

  if [[ -n "$jobs" ]]; then
    prompt="$prompt$(colorize e500e5 "$BOLD")$jobs\[$RESET\]"
  fi

  # creates a string with a shortened path
  local dir
  dir="$(pretty_dir)"
  prompt="$prompt\[$BOLD$(tput setaf 004)\] $dir\[$RESET\]"

  # search for each repo type
  repo_dir=$(_lp_upwards_find .hg)
  if [[ -n "$repo_dir" ]]; then
    repo="$(_hg_info "$repo_dir")"
    dirty="$?"
    vcs_type="hg"
    [[ -f "$repo_dir/.hg/svn/uuid" ]] && vcs_type="hg-svn"
    [[ -f "$repo_dir/.hg/git-mapfile" ]] && vcs_type="hg-git"
    if [[ -f "$repo_dir/.hg/histedit-state" ]]; then
      vcs_extra="histedit"
    elif [[ -f "$repo_dir/.hg/graftstate" ]]; then
      vcs_extra="graft"
    elif [[ -f "$repo_dir/.hg/rebasestate" ]]; then
      vcs_extra="rebase"
    elif [[ -f "$repo_dir/.hg/bisect.state" ]]; then
      vcs_extra="bisect"
    elif [[ -f "$repo_dir/.hg/merge/state" ]]; then
      vcs_extra="merge"
    fi
  else
    repo_dir=$(_lp_upwards_find .git)
    if [[ -n "$repo_dir" ]]; then
      repo="$(_git_info)"
      dirty=$?
      vcs_type="git"
    else
      dirty=0
      vcs_type=""
    fi # nothing
  fi # git

  # if repo found, plug it into the powerline chain
  if [[ -n "$vcs_type" ]]; then
    # color repo depending on dirty working directory; must check here because we
    # need to set vcs type, status, etc. and it's annoying to deal with global
    # variables and subprocesses
    oldbg=$bg
    bg=$CLEAN_BG
    fg=$CLEAN_FG

    [[ $dirty -eq 1 ]] && bg=$DIRTY_BG && fg=$DIRTY_FG
    prompt="$prompt$(_chain "$repo" $oldbg $bg $fg)"

    if [[ -n "$vcs_extra" ]]; then
      oldbg=$bg
      bg=8
      fg=$DIRTY_FG
      prompt="$prompt$(_chain "$vcs_extra" $oldbg $bg $fg)"
    fi
  fi

  if [[ -n "$VIRTUAL_ENV" ]]; then
    oldbg=$bg
    bg=4
    fg=17
    prompt="$prompt$(_chain "${VIRTUAL_ENV##*/}" $oldbg $bg $fg)"
  fi

  oldbg=$bg
  bg=$PASSBG
  fg=$PASSFG
  [[ $err -ne 0 ]] && bg=$FAILBG && fg=$FAILFG

  # change the prompt mark depending on the repo type
  local mark="\$"
  case "$vcs_type" in
    git) mark="±";;
    hg) mark="☿";;
    hg-svn) mark="☿⟆";;
    hg-git) mark="☿±";;
  esac

  prompt="$prompt$(_chain "$mark" $oldbg $bg $fg)"

  # the end cap which clears the background color and puts an arrow in the fg color of
  # the previous bg color
  PS1="$prompt\[$RESET\]\[$(tput setaf $bg)\]\[$RESET\]"
  export PS1
}

export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND ;} update_ps1"
